public class SendEmailUtility {
    public static List<Messaging.SingleEmailMessage> ContractExpiryEmailSender(String templateName,List<Account> accountList,Boolean expiryByDate){
        
        Set<Id> accIds = new Set<Id>(); 
        List<String> address = new List<String>();
        List<Account> sentemailAccounts = new List<Account>();
        List<Messaging.SingleEmailMessage> mails = new List<Messaging.SingleEmailMessage>();
        List<Account> accs2Update = new List<Account>();
        List<EmailTemplate> template = [select Id, Subject, HtmlValue, Body,BrandTemplateId from EmailTemplate where Name = :templateName];
       
        if(template.size() > 0){
            mails.addAll(EmailConfigurator(template[0],accountList,expiryByDate));
        }
        
        return mails; 
    }
    public static List<Messaging.SingleEmailMessage> EmailConfigurator(EmailTemplate template,List<Account> accountList,Boolean dateExpiry){
        List<Messaging.SingleEmailMessage> emailsToSend = new List<Messaging.SingleEmailMessage>();
        Set<Id> contactIds = new Set<Id>();
        Map<Id,List<String>> accContactMap = new Map<Id,List<String>>();
        for(Account acc : accountList){
            system.debug('Account Contact Relation:::'+acc.AccountContactRelations);
            for(AccountContactRelation relation : acc.AccountContactRelations){
                // List<String> conEmailList = new List<String>();
                //conEmailList.add(relation.Contact.Email);
                //contactIds.add(relation.ContactId);
                if(accContactMap.containsKey(relation.AccountId)){
                    accContactMap.get(relation.AccountId).add(relation.Contact.Email);
                }
                else{
                    List<String> conEmailList = new List<String>();
                    conEmailList.add(relation.Contact.Email);
                    accContactMap.put(relation.AccountId,conEmailList);
                }
            }
        }
        //list<Account> ccEmail = [SELECT owner.email, Account_Secondary_Owner__c FROM account where Id IN :accountList];
        Map<Id, Account> ccEmailAccountMap = new Map<Id, Account>([SELECT owner.email,Sales_Secondary_Owner__c FROM account where Id IN :accountList]); 
        list<Id> secondaryOwnerId = new  list<Id>();
        for(Id acc1 :ccEmailAccountMap.keySet()){
            secondaryOwnerId.add(ccEmailAccountMap.get(acc1).Sales_Secondary_Owner__c);
        }
        
        Map<Id, User> SecondaryEmail = new Map<Id, User>([SELECT id, email FROM User where Id IN:secondaryOwnerId]); 
         for(Account acc : accountList){
            List<String> address = new List<String>();
            List<String> ccAddress = new List<String>();
            if(accContactMap.containsKey(acc.Id)){
              address.addAll(accContactMap.get(acc.Id));
                System.debug('List of Email Addresses:::'+accContactMap.get(acc.Id));
            
            if(ccEmailAccountMap.get(acc.Id) != null && !String.isBlank(ccEmailAccountMap.get(acc.Id).owner.email))
               ccAddress.add(ccEmailAccountMap.get(acc.Id).owner.email);        
                User SecondaryOwnerAdd = SecondaryEmail.get(ccEmailAccountMap.get(acc.Id).Sales_Secondary_Owner__c);
               ccAddress.add(SecondaryOwnerAdd.email);
            Messaging.SingleEmailMessage mail = Messaging.renderStoredEmailTemplate(template.Id, null,  acc.Id);
            //mail.setTemplateId(template.Id);
            //mail.setHtmlBody(mail.getHtmlBody());
            
            String subject = template.Subject;
            String body = template.Body;
            system.debug('HTML Body'+template.Body);
            mail.setToAddresses(address);
            if(!ccAddress.isEmpty())
               mail.setCcAddresses(ccAddress);
            mail.setTreatBodiesAsTemplate(true);
            mail.setSaveAsActivity(false);
            if(!dateExpiry){
                body = body.replace('<-Contract Data->','has already reached'+ acc.of_Contract_Consumption__c+'% consumption limit /'); 
            }
            else{
                body = body.replace('<-Contract Data->','has just'+system.today().daysBetween(acc.Contract_End_Date__c) +'days to expiry');
                
                //body = body.replace('XX', string.valueOf(acc.of_Contract_Consumption__c));
            }
            system.debug('Percentage of Consumption'+acc.Active_Contract__r.of_Contract_Consumption__c);
            //body = body.replace('<Contract Consumed>', String.valueOf(acc.Active_Contract__r.of_Contract_Consumption__c));
            mail.setSubject(subject);
            system.debug('HTML Body'+mail.getHtmlBody());
            emailsToSend.add(mail);
            }
        }
        
        return emailsToSend;
    }
    public static void fMethod(){
        integer i = 0;
          
            i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
       i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
       i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      
            i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      
            i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      
            i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      
            i++;
      i++;
         i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
       i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
       i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      
            i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      
            i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      
            i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
         i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
       i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
       i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      
            i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      
            i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      
            i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      
            i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      
            i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;   
     }
    
}