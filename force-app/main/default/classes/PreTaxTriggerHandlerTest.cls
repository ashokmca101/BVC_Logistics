@IsTest
public class PreTaxTriggerHandlerTest {
        @testSetup static void testdata() {
            Test.startTest();
            list<BVC_CB_Object_Mapping__c> objmappings =new list<BVC_CB_Object_Mapping__c>();
            BVC_CB_Object_Mapping__c objmapping =new BVC_CB_Object_Mapping__c();
            objmapping.Source_Field_API_Name__c ='BVC_CB_SalesForceCustomerId__c';
            objmapping.Target_Field_API_Name__c ='BVC_CB_SalesForceCustomerId__c';
            objmapping.Source_Object_API_Name__c='Order';
            objmapping.Is_Active__c = true;
            objmapping.Target_Object_API_Name__c='blng__Invoice__c';
            objmappings.add(objmapping);
             BVC_CB_Object_Mapping__c objmapping2 =new BVC_CB_Object_Mapping__c();
            objmapping2.Source_Field_API_Name__c ='BVC_CB_SalesForceCustomerId__c';
            objmapping2.Target_Field_API_Name__c ='AccountId';
            objmapping2.Source_Object_API_Name__c='BVC_CB_PreTaxBill__c';
            objmapping2.Target_Object_API_Name__c='Order';
            objmapping2.Is_Active__c = true;
            objmappings.add(objmapping2);
             BVC_CB_Object_Mapping__c objmapping3 =new BVC_CB_Object_Mapping__c();
            objmapping3.Source_Field_API_Name__c ='BVC_CB_BE_Date__c';
            objmapping3.Target_Field_API_Name__c ='EffectiveDate';
            objmapping3.Source_Object_API_Name__c='BVC_CB_PreTaxBill__c';
            objmapping3.Target_Object_API_Name__c='Order';
            objmapping3.Is_Active__c = true;
            objmappings.add(objmapping3);
            BVC_CB_Object_Mapping__c objmapping4 =new BVC_CB_Object_Mapping__c();
            objmapping4.Source_Field_API_Name__c ='BVC_CB_ChargeType__c';
            objmapping4.Target_Field_API_Name__c ='SBQQ__ChargeType__c';
            objmapping4.Source_Object_API_Name__c='BVC_CB_PreTaxBillDetails__c';
            objmapping4.Target_Object_API_Name__c='OrderItem';
            objmapping4.Is_Active__c = true;
            objmappings.add(objmapping4);
            BVC_CB_Object_Mapping__c objmapping5 =new BVC_CB_Object_Mapping__c();
            objmapping5.Source_Field_API_Name__c ='BVC_CB_ChargeAmount__c';
            objmapping5.Target_Field_API_Name__c ='UnitPrice';
            objmapping5.Source_Object_API_Name__c='BVC_CB_PreTaxBillDetails__c';
            objmapping5.Target_Object_API_Name__c='OrderItem';
            objmapping5.Is_Active__c = true;
            objmappings.add(objmapping5);
            BVC_CB_Object_Mapping__c objmapping6 =new BVC_CB_Object_Mapping__c();
            objmapping6.Source_Field_API_Name__c ='BVC_CB_Charge_Product_Code__c';
            objmapping6.Target_Field_API_Name__c ='Product2Id';
            objmapping6.Source_Object_API_Name__c='BVC_CB_PreTaxBill__c';
            objmapping6.Target_Object_API_Name__c='Orderitem';
            objmapping6.Is_Active__c = true;
             BVC_CB_Object_Mapping__c objmapping7 =new BVC_CB_Object_Mapping__c();
            objmapping7.Source_Field_API_Name__c ='BVC_CB_Import_Shipment__c';
            objmapping7.Target_Field_API_Name__c ='blng__BillingDayOfMonth__c';
            objmapping7.Source_Object_API_Name__c='BVC_CB_PreTaxBill__c';
            objmapping7.Target_Object_API_Name__c='Order';
            objmapping7.Is_Active__c = true;
            objmappings.add(objmapping7);
             BVC_CB_Object_Mapping__c objmapping8 =new BVC_CB_Object_Mapping__c();
            objmapping8.Source_Field_API_Name__c ='BVC_CB_Org_Branch_SF_ID__c';
            objmapping8.Target_Field_API_Name__c ='BVC_Branch__c';
            objmapping8.Source_Object_API_Name__c='Order';
            objmapping8.Target_Object_API_Name__c='blng__Invoice__c';
            objmapping8.Is_Active__c = true;
            objmappings.add(objmapping8);
           BVC_CB_Object_Mapping__c objmapping9 =new BVC_CB_Object_Mapping__c();
            objmapping9.Source_Field_API_Name__c ='BVC_CB_Org_Branch_SF_ID__c';
            objmapping9.Target_Field_API_Name__c ='BVC_CB_Org_Branch_SF_ID__c';
            objmapping9.Source_Object_API_Name__c='Order';
            objmapping9.Target_Object_API_Name__c='blng__Invoice__c';
            objmapping9.Is_Active__c = true;
            objmappings.add(objmapping9);
              BVC_CB_Object_Mapping__c objmapping10 =new BVC_CB_Object_Mapping__c();
            objmapping10.Source_Field_API_Name__c ='Id';
            objmapping10.Target_Field_API_Name__c ='BVC_CB_PreTaxBill__c';
            objmapping10.Source_Object_API_Name__c='BVC_CB_PreTaxBill__c';
            objmapping10.Target_Object_API_Name__c='Order';
            objmapping10.Is_Active__c = true;
            objmappings.add(objmapping10);
            BVC_CB_Object_Mapping__c objmapping11 =new BVC_CB_Object_Mapping__c();
            objmapping11.Source_Field_API_Name__c ='BVC_CB_SalesForceAddress__c';
            objmapping11.Target_Field_API_Name__c ='Billing_Address__c';
            objmapping11.Source_Object_API_Name__c='BVC_CB_PreTaxBill__c';
            objmapping11.Target_Object_API_Name__c='Order';
            objmapping11.Is_Active__c = true;
            objmappings.add(objmapping11);
			rsdoc__Document_Action__c docaction1=new rsdoc__Document_Action__c();
            docaction1.rsdoc__Base_object_API__c='blng__CreditNote__c';
            docaction1.rsdoc__Template_Document_ID__c='1eOrVMKkgO3sr7YH4TX7w5JcID3aQY1Q2e66Mq1q0HDc';
            docaction1.rsdoc__Template_Name__c='CB Commercial Credit Note';
            insert docaction1;
            insert  objmappings;
       Entity__c entity= TestUtility.createBVCEntity();
          insert entity;
       blng__LegalEntity__c blngEntity = TestUtility.createLegalEntity(entity);
          insert blngEntity;
       Active_Pincode__c ActivePinCode = TestUtility.createPinCode();
          insert ActivePinCode;
       Hub__c orgBranch = TestUtility.createBVCBranch(blngEntity,ActivePinCode ); 
         insert orgBranch;
       blng__BillingRule__c BlngRule = TestUtility.createBillingRule();
        insert Blngrule;
        blng__RevenueRecognitionRule__c RevenueRule= TestUtility.createRevenueRule();
        insert RevenueRule;
        blng__TaxRule__c TaxRule = TestUtility.createTaxRule();
        insert TaxRule;
          blng__FinanceBook__c bfb= new blng__FinanceBook__c();
            bfb.name= 'test bfb';
            bfb.blng__PeriodType__c ='Accounting';
            insert bfb;
            blng__BillingTreatment__c Btreatment = new blng__BillingTreatment__c();
        Btreatment.Name ='test treatment';
            Btreatment.blng__BillingRule__c =Blngrule.id;
            btreatment.blng__BillingFinanceBook__c = bfb.id;
        insert Btreatment;
            list<Product2> prodlist = new list<Product2>();
        Product2 ChargeHead = TestUtility.createACRProduct(Blngrule,RevenueRule,TaxRule);
        ChargeHead.Name='COURIER CHARGES';
        ChargeHead.ProductCode='CB-22';
        prodlist.add(ChargeHead);
         Product2 ChargeHead1 = TestUtility.createACRProduct(Blngrule,RevenueRule,TaxRule);
        ChargeHead1.Name='CUSTOM BROKERAGE';
        ChargeHead1.ProductCode='CB-999';
        prodlist.add(ChargeHead1);
        Product2 ChargeHead2 = TestUtility.createACRProduct(Blngrule,RevenueRule,TaxRule);
        ChargeHead2.Name='BOND FORMALITY';
        ChargeHead2.ProductCode='CB-199';
        prodlist.add(ChargeHead2);
        Product2 ChargeHead3 = TestUtility.createACRProduct(Blngrule,RevenueRule,TaxRule);
        ChargeHead3.Name='BVC BATH';
        ChargeHead3.family='BATH';
        ChargeHead3.ProductCode='BVC BATH';
        prodlist.add(ChargeHead3);
        insert prodlist;   
        Pricebook2 PB=  TestUtility.createPriceBook();
        insert PB;
        id StandardPricebookid =Test.getStandardPricebookId();
        list<PricebookEntry> pblist = new list<PricebookEntry>();
        PricebookEntry PBEstandard= new PricebookEntry(Pricebook2Id =StandardPricebookid, Product2Id = ChargeHead.Id, UnitPrice = 1000, IsActive = true);
       pblist.add(PBEstandard);
       PricebookEntry PBEstandard2= new PricebookEntry(Pricebook2Id =StandardPricebookid, Product2Id = ChargeHead2.Id, UnitPrice = 1000, IsActive = true);
       pblist.add(PBEstandard2);
       PricebookEntry PBEstandard1= new PricebookEntry(Pricebook2Id =StandardPricebookid, Product2Id = ChargeHead1.Id, UnitPrice = 1000, IsActive = true);
       pblist.add(PBEstandard1);
       PricebookEntry PBEstandard3= new PricebookEntry(Pricebook2Id =StandardPricebookid, Product2Id = ChargeHead3.Id, UnitPrice = 1000, IsActive = true);
       pblist.add(PBEstandard3);
       insert pblist;
        List<PricebookEntry> PBEntry= TestUtility.createPricebookEntry(PB.id,prodlist);
        insert PBEntry;
            account customer= new account();
            customer.name='test';
            customer.PAN_Number_of_Entity__c='PV8278N1ZQ';
            customer.GST_Registered__c =true;
            customer.KARZAA_KYC_Verified__c = true;
            customer.Last_Name__c = 'customer';
            insert customer;
            list<account> acclist = new list<account>();
            acclist.add(customer);
            List<AddressBook__c> blngAddress = TestUtility.createAddressBook(accList);
            blngAddress[0].GSTIN__c='PV8278N1ZQ12345';
            blngAddress[0].Dealer_Type__c = 'SEZ';
        	insert blngAddress;
            contact c=TestUtility.createContact(customer);
            list<opportunity> oplist=TestUtility.createOpportunity(acclist,c,entity);
            insert oplist;
      	   BVC_CB_PreTaxBill__c Pretaxbill= new 	BVC_CB_PreTaxBill__c();
           Pretaxbill.name='TestPretaxBill0001';
           Pretaxbill.BVC_CB_Org_Branch_SF_ID__c=orgBranch.id;
           Pretaxbill.BVC_CB_Is_Order_Created__c=false;
           Pretaxbill.BVC_CB_PretaxDetails_Inserted__c=false;
           pretaxbill.BVC_CB_Import_Shipment__c=1;
           pretaxbill.BVC_CB_BE_Date__c=system.today();
           pretaxbill.BVC_CB_PretaxDetails_Inserted__c =False;
           pretaxbill.BVC_CB_ExportShipmentID__c='test';
           pretaxbill.BVC_CB_SalesForceCustomerId__c=customer.Id;
           pretaxbill.BVC_CB_SalesForceAddress__c=blngAddress[0].Id;
           insert Pretaxbill;
           BVC_CB_PreTaxBill__c Pretaxbill2= new BVC_CB_PreTaxBill__c();
           Pretaxbill2.name='TestPretaxBill0002';
           Pretaxbill2.BVC_CB_Org_Branch_SF_ID__c=orgBranch.id;
           Pretaxbill2.BVC_CB_Is_Order_Created__c=false;
           Pretaxbill2.BVC_CB_PretaxDetails_Inserted__c=false;
           pretaxbill2.BVC_CB_Import_Shipment__c=1;
           pretaxbill2.BVC_CB_BE_Date__c=system.today();
           pretaxbill2.BVC_CB_PretaxDetails_Inserted__c =False;
       	   pretaxbill2.BVC_CB_ExportShipmentID__c='test';
           pretaxbill2.BVC_CB_SalesForceCustomerId__c=customer.Id;
       	   insert Pretaxbill2;
           list<BVC_CB_PreTaxBillDetails__c> Pretaxbilldetailslist= new list<BVC_CB_PreTaxBillDetails__c>();   
       	   BVC_CB_PreTaxBillDetails__c Pretaxbilldetails= new BVC_CB_PreTaxBillDetails__c();
       	   Pretaxbilldetails.BVC_CB_Invoice_Type__c='Tax Invoice';
           Pretaxbilldetails.BVC_CB_Charge_Product_Code__c=ChargeHead.id;
            Pretaxbilldetails.BVC_CB_PreTaxBill__c = Pretaxbill.id;
            Pretaxbilldetails.BVC_CB_ChargeType__c='Agency';
            Pretaxbilldetails.BVC_CB_ChargeAmount__c=30;
            Pretaxbilldetailslist.add(Pretaxbilldetails);
            BVC_CB_PreTaxBillDetails__c Pretaxbilldetails2= new BVC_CB_PreTaxBillDetails__c();
        	Pretaxbilldetails2.BVC_CB_Invoice_Type__c='Commercial Invoice';
        	Pretaxbilldetails2.BVC_CB_Charge_Product_Code__c=ChargeHead1.id;
            Pretaxbilldetails2.BVC_CB_PreTaxBill__c = Pretaxbill.id;
            Pretaxbilldetails2.BVC_CB_ChargeType__c='Agency';
            Pretaxbilldetails2.BVC_CB_ChargeAmount__c=30;
            Pretaxbilldetailslist.add(Pretaxbilldetails2);
              BVC_CB_PreTaxBillDetails__c Pretaxbilldetails3= new BVC_CB_PreTaxBillDetails__c();
        	Pretaxbilldetails3.BVC_CB_Invoice_Type__c='Bill of Supply Invoice';
        	Pretaxbilldetails3.BVC_CB_Charge_Product_Code__c=ChargeHead2.id;
            Pretaxbilldetails3.BVC_CB_PreTaxBill__c = Pretaxbill.id;
            Pretaxbilldetails3.BVC_CB_ChargeType__c='Agency';
            Pretaxbilldetails3.BVC_CB_ChargeAmount__c=30;
            Pretaxbilldetailslist.add(Pretaxbilldetails3);
            BVC_CB_PreTaxBillDetails__c Pretaxbilldetails4= new BVC_CB_PreTaxBillDetails__c();
       	    Pretaxbilldetails4.BVC_CB_Invoice_Type__c='Tax Invoice';
        	Pretaxbilldetails4.BVC_CB_Charge_Product_Code__c=ChargeHead.id;
            Pretaxbilldetails4.BVC_CB_PreTaxBill__c = Pretaxbill2.id;
            Pretaxbilldetails4.BVC_CB_ChargeType__c='Agency';
            Pretaxbilldetails4.BVC_CB_ChargeAmount__c=30;
            Pretaxbilldetailslist.add(Pretaxbilldetails4);
            BVC_CB_PreTaxBillDetails__c Pretaxbilldetails5= new BVC_CB_PreTaxBillDetails__c();
         	Pretaxbilldetails5.BVC_CB_Invoice_Type__c='Commercial Invoice';
        	Pretaxbilldetails5.BVC_CB_Charge_Product_Code__c=ChargeHead1.id;
            Pretaxbilldetails5.BVC_CB_PreTaxBill__c = Pretaxbill2.id;
            Pretaxbilldetails5.BVC_CB_ChargeType__c='Agency';
            Pretaxbilldetails5.BVC_CB_ChargeAmount__c=30;
            Pretaxbilldetailslist.add(Pretaxbilldetails5);
              BVC_CB_PreTaxBillDetails__c Pretaxbilldetails6= new BVC_CB_PreTaxBillDetails__c();
        	Pretaxbilldetails6.BVC_CB_Invoice_Type__c='Bill of Supply Invoice';
        	Pretaxbilldetails6.BVC_CB_Charge_Product_Code__c=ChargeHead2.id;
            Pretaxbilldetails6.BVC_CB_PreTaxBill__c = Pretaxbill2.id;
            Pretaxbilldetails6.BVC_CB_ChargeType__c='Agency';
            Pretaxbilldetails6.BVC_CB_ChargeAmount__c=30;
            Pretaxbilldetailslist.add(Pretaxbilldetails6);
        insert Pretaxbilldetailslist;
            list<rsdoc__Document_Action__c> doclist=new list<rsdoc__Document_Action__c>();
        rsdoc__Document_Action__c doc1=new rsdoc__Document_Action__c();
        doc1.rsdoc__Template_Name__c ='CB Import Tax Invoice';
        doc1.rsdoc__Base_object_API__c = 'blng__Invoice__c';
        doc1.rsdoc__Template_Document_ID__c='1uZcLxCSH_49alJviesXWA0xMFwLBTytgaA0TdIIvkag';
        rsdoc__Document_Action__c doc2=new rsdoc__Document_Action__c();
        doc2.rsdoc__Template_Name__c ='CB Import Bill of Supply Invoice';
        doc2.rsdoc__Base_object_API__c = 'blng__Invoice__c';
        doc2.rsdoc__Template_Document_ID__c='1uZcLxCSH_49alJviesXWA0xMFwLBTytgaA0TdIIvkag';
        rsdoc__Document_Action__c doc3=new rsdoc__Document_Action__c();
        doc3.rsdoc__Template_Name__c ='CB Import Commercial Invoice';
        doc3.rsdoc__Base_object_API__c = 'blng__Invoice__c';
        doc3.rsdoc__Template_Document_ID__c='1uZcLxCSH_49alJviesXWA0xMFwLBTytgaA0TdIIvkag';
        doclist.add(doc1);doclist.add(doc2);doclist.add(doc3);
        insert doclist;
            CPQ_CNEYTaxCalculation.fakeMethod();
             Test.stopTest();
        }
   @istest static void createOrderFromPreTaxTest(){
        Test.startTest();
        BVC_CB_PreTaxBill__c PTbill =[Select ID, name,BVC_CB_PretaxDetails_Inserted__c,BVC_CB_Is_Order_Created__c from BVC_CB_PreTaxBill__c where name='TestPretaxBill0001'];
        PTbill.BVC_CB_PretaxDetails_Inserted__c =True;
    //   PTbill.BVC_CB_Is_Order_Created__c= True;
      // PTbill.BVC_CB_Invoice_Generated_in_Salesforce__c=false;
       
        update PTbill;
       system.debug('order inserted======'+PTbill.BVC_CB_Is_Order_Created__c);
        Test.stopTest();
        //orderitem oi =[Select id from orderitem];
        order ord=[Select id,Status,blng__BillingDayOfMonth__c from order limit 1];
        OrderItem orderItemRec = new OrderItem();
       orderItemRec.PriceBookEntryId= [select Id,Product2Id  from PricebookEntry where Pricebook2.Name='BVC INR Price Book' limit 1].Id;
       orderItemRec.blng__BillingRule__c =[select id from blng__BillingRule__c limit 1].id;
  	   orderItemRec.blng__TaxRule__c =[select id from blng__TaxRule__c limit 1].id;
       orderItemRec.blng__RevenueRecognitionRule__c =[select id from blng__RevenueRecognitionRule__c limit 1].id;	
       orderItemRec.blng__BillingTreatment__c =[select id from blng__BillingTreatment__c limit 1].id;
       orderItemRec.OrderId =ord.id;                   	
       orderItemRec.UnitPrice=30;
       orderItemRec.Quantity =1;
       Product2 ChargeHead=[select id from Product2 limit 1];
       orderItemRec.Product2Id=ChargeHead.id;
       orderItemRec.BVC_CB_ChargeType__c='Agency';
       orderItemRec.SBQQ__ChargeType__c='Agency';
       orderItemRec.BVC_CB_ChargeAmount__c=30;
       orderitemrec.SBQQ__BillingFrequency__c ='Monthly';
       insert orderItemRec;
       
       ord.Status ='Activated';
       ord.BVC_CB_PreTaxBill__c  =PTbill.id;
       update ord;
        blng__Invoice__c inv =[select id,Billing_Address__c,BVC_CB_Invoice_Type__c,BVC_CB_Is_CB_Invoice__c,Invoice_Type__c,Short_URL__c,Total_Secure_Logistics_Tax_Amount__c,Total_Logistics_Tax_Amount__c,Total_Commission_Tax__c,blng__InvoiceStatus__c,blng__TotalAmount__c,ST_Invoice_Series__c,EY_Tax_Calculation_Status__c,blng__TaxAmount__c,Total_Freight_Tax__c,Total_Liability_Charge_Tax__c,Total_Offline_Tax__c,Total_Weight_Charge_Tax__c,Total_BVC_Valuation_Charge_Tax__c,Total_Docket_Charge_Tax__c,Total_Holiday_Charge_Tax__c,Total_Fuel_Charge_Tax__c,Total_Fuel_surcharge_Tax__c,Total_Vaulting_tax__c from blng__Invoice__c limit 1];
       /////////test 
       product2 p=[select id from product2 where name='BVC Bath'];
        inv.Product__c=p.id;
          inv.Total_Logistics_Charges__c =30;
          inv.blng__InvoiceStatus__c='Draft';
          update inv;
       //////////test
        inv.Billing_Address__c =[select id from AddressBook__c where Dealer_Type__c = 'SEZ' limit 1].id;
        inv.EY_Tax_Calculation_Status__c = 'Success';
        inv.blng__InvoiceStatus__c = 'Draft';
       	inv.BVC_CB_Operation_Type__c='Import';
        update inv;
        Map<Id,blng__Invoice__c> newMap =new  Map<Id,blng__Invoice__c>();
        newmap.put(inv.id,inv);
        Map<Id,blng__Invoice__c> oldMap =new  Map<Id,blng__Invoice__c>();
        oldmap.put(inv.id,inv);
        InvoiceTriggerHandler.postInvoice(newmap,oldmap);
        OrderTriggerHandler.fakeMethod1();
        InvoiceTriggerHandler.Method2();
        CreditNoteLineTriggerHandler.fakemethod();
    }
      @istest static void createOrderFromPreTaxTest2(){
        Test.startTest();
        BVC_CB_PreTaxBill__c PTbill =[Select ID, name,BVC_CB_PretaxDetails_Inserted__c from BVC_CB_PreTaxBill__c where name='TestPretaxBill0002'];
        PTbill.BVC_CB_PretaxDetails_Inserted__c =True;
        update PTbill; 
        Test.stopTest();
        list<orderitem> oi =[Select id,orderId from orderitem];
        system.debug(oi);
        list<order> ord=[Select id,Status,blng__BillingDayOfMonth__c,BVC_CB_Invoice_Type__c from order  where BVC_CB_PreTaxBill__c =:PTbill.id limit 1];
        OrderItem orderItemRec = new OrderItem();
        orderItemRec.PriceBookEntryId= [select Id,Product2Id  from PricebookEntry where Pricebook2.Name='BVC INR Price Book' limit 1].Id;
        orderItemRec.blng__BillingRule__c =[select id from blng__BillingRule__c limit 1].id;
        orderItemRec.blng__TaxRule__c =[select id from blng__TaxRule__c limit 1].id;
        orderItemRec.blng__RevenueRecognitionRule__c =[select id from blng__RevenueRecognitionRule__c limit 1].id;	
        orderItemRec.blng__BillingTreatment__c =[select id from blng__BillingTreatment__c limit 1].id;
        orderItemRec.OrderId =ord[0].id;
        orderItemRec.UnitPrice=30;
        orderItemRec.SBQQ__ChargeType__c='Agency';
        orderItemRec.Quantity =1;
        Product2 ChargeHead=[select id from Product2 limit 1];
       	orderItemRec.Product2Id=ChargeHead.id;
        orderItemRec.BVC_CB_ChargeType__c='Agency';
        orderItemRec.BVC_CB_ChargeAmount__c=30;
        orderitemrec.SBQQ__BillingFrequency__c ='Monthly';
        insert orderItemRec;
        system.debug(ord);
        ord[0].Status ='Activated';
        ord[0].BVC_CB_Invoice_Type__c ='Commercial Invoice';
        update ord;
        blng__Invoice__c inv =[select id,blng__Account__c,BVC_Entity__c,BVC_Branch__c,BVC_Billing_Entity__c,blng__BillToContact__c,Billing_Address__c,BVC_CB_Is_CB_Invoice__c,Invoice_Type__c,Short_URL__c,Total_Secure_Logistics_Tax_Amount__c,Total_Logistics_Tax_Amount__c,Total_Commission_Tax__c,blng__InvoiceStatus__c,EY_Tax_Calculation_Status__c,blng__TaxAmount__c,Total_Freight_Tax__c,Total_Liability_Charge_Tax__c,Total_Offline_Tax__c,Total_Weight_Charge_Tax__c,Total_BVC_Valuation_Charge_Tax__c,Total_Docket_Charge_Tax__c,Total_Holiday_Charge_Tax__c,Total_Fuel_Charge_Tax__c,Total_Fuel_surcharge_Tax__c,Total_Vaulting_tax__c from blng__Invoice__c limit 1];
        inv.Billing_Address__c =[select id from AddressBook__c where Dealer_Type__c = 'SEZ' limit 1].id;
        inv.BVC_CB_Is_CB_Invoice__c = FALSE;
        inv.Invoice_Type__c ='Commercial Invoice';
        inv.ST_Invoice_Series__c = null;
        inv.EY_Tax_Calculation_Status__c = 'Success';
        inv.blng__InvoiceStatus__c = 'Draft';
        update inv;
    }
    //Uncomment this if you need code coverage for credit note trigger handler
   /* @istest static void createOrderFromPreTaxTest3(){
        Test.startTest();
        BVC_CB_PreTaxBill__c PTbill =[Select ID, name,BVC_CB_PretaxDetails_Inserted__c from BVC_CB_PreTaxBill__c where name='TestPretaxBill0001'];
        PTbill.BVC_CB_PretaxDetails_Inserted__c =True;
        update PTbill;
    
        Test.stopTest();
          
        list<order> ord=[Select id,Status,blng__BillingDayOfMonth__c,Business_Type__c,BVC_CB_Invoice_Type__c from order  where BVC_CB_PreTaxBill__c =:PTbill.id limit 1];
        system.debug(ord);
        OrderItem orderItemRec = new OrderItem();
        orderItemRec.PriceBookEntryId= [select Id,Product2Id  from PricebookEntry where Pricebook2.Name='BVC INR Price Book' limit 1].Id;
        orderItemRec.blng__BillingRule__c =[select id from blng__BillingRule__c limit 1].id;
        orderItemRec.blng__TaxRule__c =[select id from blng__TaxRule__c limit 1].id;
        orderItemRec.blng__RevenueRecognitionRule__c =[select id from blng__RevenueRecognitionRule__c limit 1].id;	
        orderItemRec.blng__BillingTreatment__c =[select id from blng__BillingTreatment__c limit 1].id;
        orderItemRec.OrderId =ord[0].id;
        orderItemRec.UnitPrice=30;
        orderItemRec.SBQQ__ChargeType__c='Agency';
        orderItemRec.Quantity =1;
        Product2 ChargeHead=[select id from Product2 limit 1];
       	orderItemRec.Product2Id=ChargeHead.id;
        orderItemRec.BVC_CB_ChargeType__c='Agency';
        orderItemRec.BVC_CB_ChargeAmount__c=30;
        orderitemrec.SBQQ__BillingFrequency__c ='Monthly';
        insert orderItemRec;
        ord[0].Status ='Activated';
        ord[0].Business_Type__c='ACR';
        Opportunity op=[select id from Opportunity];
        ord[0].OpportunityId=op.id;
        ord[0].BVC_CB_Invoice_Type__c ='Commercial Invoice';
        update ord[0];
        blng__Invoice__c inv =[select id,blng__Account__c,BVC_Entity__c,BVC_Branch__c,BVC_Billing_Entity__c,blng__BillToContact__c,Billing_Address__c,BVC_CB_Is_CB_Invoice__c,Invoice_Type__c,Short_URL__c,Total_Secure_Logistics_Tax_Amount__c,Total_Logistics_Tax_Amount__c,Total_Commission_Tax__c,blng__InvoiceStatus__c,EY_Tax_Calculation_Status__c,blng__TaxAmount__c,Total_Freight_Tax__c,Total_Liability_Charge_Tax__c,Total_Offline_Tax__c,Total_Weight_Charge_Tax__c,Total_BVC_Valuation_Charge_Tax__c,Total_Docket_Charge_Tax__c,Total_Holiday_Charge_Tax__c,Total_Fuel_Charge_Tax__c,Total_Fuel_surcharge_Tax__c,Total_Vaulting_tax__c from blng__Invoice__c limit 1];
        inv.Billing_Address__c =[select id from AddressBook__c where Dealer_Type__c = 'SEZ' limit 1].id;
        inv.BVC_CB_Is_CB_Invoice__c = TRUE;
        inv.BVC_CB_Operation_Type__c='Import';
        inv.Invoice_Type__c ='Tax Invoice';
        inv.BVC_CB_Invoice_Type__c='Tax Invoice';
        inv.EY_Tax_Calculation_Status__c = 'Success';
        inv.blng__InvoiceStatus__c = 'POSTED';
        inv.Invoice_Doc_URL__c='test';
        inv.BVC_CB_ROUND_OFF__c =0.30;
        update inv;
         blng__InvoiceLine__c invLine = [select id,blng__Invoice__c,ST_Offline_Charge__c,blng__Subtotal__c,blng__UnitPrice__c,blng__Product__c,Name,blng__OrderProduct__c from blng__InvoiceLine__c where blng__Invoice__c= :inv.id limit 1];
                //blng__Invoice__c invRec = [Select id,Billing_Address__c, blng__Account__c, BVC_Branch__c, BVC_Billing_Entity__c,BVC_Billing_Entity__r.GSTIN_State_Code__c, BVC_Entity__c, blng__BillToContact__c from blng__Invoice__c where blng__InvoiceStatus__c ='Posted' Limit 1];
          //list<blng__CreditNote__c> cnlist = new list<blng__CreditNote__c>();
          list<blng__CreditNoteLine__c> cnlinelist = new list<blng__CreditNoteLine__c>();
        list<blng__CreditNote__c> creditnotelist=new list<blng__CreditNote__c>();
        blng__CreditNote__c creditNote = new blng__CreditNote__c();
        creditNote.blng__Account__c = inv.blng__Account__c;
        creditNote.BVC_Branch__c = inv.BVC_Branch__c;
        creditNote.BVC_Billing_Entity__c = inv.BVC_Billing_Entity__c;
        creditNote.Billing_Address__c = inv.Billing_Address__c;
        creditNote.blng__BillToContact__c = inv.blng__BillToContact__c;
        creditNote.BVC_Entity__c = inv.BVC_Entity__c;
        creditNote.blng__RelatedInvoice__c = inv.Id;
        creditNote.blng__CreditNoteDate__c = System.Today();
        creditNote.Approval_Status__c = 'Approved';
        creditNote.Reason_for_Credit_Note__c = 'Duplicate Billing';
        creditNote.RecordTypeId = Schema.SObjectType.blng__CreditNote__c.getRecordTypeInfosByName().get('Tax Credit Note').getRecordTypeId();
        creditnotelist.add(creditNote);
        //insert creditNote;
		blng__Invoice__c inv1 =[select id,blng__Account__c,BVC_Entity__c,BVC_Branch__c,BVC_Billing_Entity__c,blng__BillToContact__c,Billing_Address__c,BVC_CB_Is_CB_Invoice__c,Invoice_Type__c,Short_URL__c,Total_Secure_Logistics_Tax_Amount__c,Total_Logistics_Tax_Amount__c,Total_Commission_Tax__c,blng__InvoiceStatus__c,EY_Tax_Calculation_Status__c,blng__TaxAmount__c,Total_Freight_Tax__c,Total_Liability_Charge_Tax__c,Total_Offline_Tax__c,Total_Weight_Charge_Tax__c,Total_BVC_Valuation_Charge_Tax__c,Total_Docket_Charge_Tax__c,Total_Holiday_Charge_Tax__c,Total_Fuel_Charge_Tax__c,Total_Fuel_surcharge_Tax__c,Total_Vaulting_tax__c from blng__Invoice__c limit 1];
        inv1.Billing_Address__c =[select id from AddressBook__c where Dealer_Type__c = 'SEZ' limit 1].id;
        inv1.BVC_CB_Is_CB_Invoice__c = TRUE;
        inv.BVC_CB_Operation_Type__c='Import';
        inv1.Invoice_Type__c ='Commercial Invoice';
        inv1.BVC_CB_Invoice_Type__c='Commercial Invoice';
        inv1.EY_Tax_Calculation_Status__c = 'Success';
        inv1.blng__InvoiceStatus__c = 'POSTED';
        update inv1;
        system.schedule('Test Invalid Integration Logs Scheduler1', '0 35 0 ? * * *', new ClearInvalidIntegrationLogsScheduler() );
		// CB Credit Note
		blng__CreditNote__c creditNote1 = new blng__CreditNote__c();
        creditNote1.blng__Account__c = inv.blng__Account__c;
        creditNote1.BVC_Branch__c = inv.BVC_Branch__c;
        creditNote1.BVC_Billing_Entity__c = inv.BVC_Billing_Entity__c;
        creditNote1.Billing_Address__c = inv.Billing_Address__c;
        creditNote1.blng__BillToContact__c = inv.blng__BillToContact__c;
        creditNote1.BVC_Entity__c = inv.BVC_Entity__c;
        creditNote1.blng__RelatedInvoice__c = inv1.Id;
        creditNote1.blng__CreditNoteDate__c = System.Today();
        creditNote1.Approval_Status__c = 'Pending';
        creditNote1.blng__Status__c='Draft';
        creditNote1.Reason_for_Credit_Note__c = 'Duplicate Billing';
        creditNote1.RecordTypeId = Schema.SObjectType.blng__CreditNote__c.getRecordTypeInfosByName().get('BOS Credit Note').getRecordTypeId();
        //cnlist.add(creditNote1);
        creditnotelist.add(creditNote1);
        insert creditnotelist;
        //insert creditNote1;
        creditNote1.Approval_Status__c = 'Approved';
        creditNote1.blng__Status__c='Posted';
        update creditNote1;
        Map<Id,String> ordermap=new Map<Id,String>();
        ordermap.put(ord[0].Id,ord[0].BVC_CB_Invoice_Type__c);
        CreditNoteTriggerHandler.getBranchInfo(ordermap);
        CreditNoteTriggerHandler.fakemethod();
        //CPQ_CNEYTaxCalculation.doTaxCalculationForCN(creditNote1.id);
        CPQ_CNEYTaxCalculation.fakeMethod();
    }*/
    @istest static void createOrderFromPreTaxTest4(){
        Test.startTest();
        BVC_CB_PreTaxBill__c PTbill =[Select ID, name,BVC_CB_PretaxDetails_Inserted__c from BVC_CB_PreTaxBill__c where name='TestPretaxBill0002'];
        PTbill.BVC_CB_PretaxDetails_Inserted__c =True;
        update PTbill;
    
        Test.stopTest();
          list<orderitem> oi =[Select id,orderId from orderitem];
          system.debug(oi);
          list<order> ord=[Select id,Status,blng__BillingDayOfMonth__c,BVC_CB_Invoice_Type__c from order  where BVC_CB_PreTaxBill__c =:PTbill.id limit 1];
          system.debug(ord);
        OrderItem orderItemRec = new OrderItem();
       orderItemRec.PriceBookEntryId= [select Id,Product2Id  from PricebookEntry where Pricebook2.Name='BVC INR Price Book' limit 1].Id;
                orderItemRec.blng__BillingRule__c =[select id from blng__BillingRule__c limit 1].id;
            	orderItemRec.blng__TaxRule__c =[select id from blng__TaxRule__c limit 1].id;
            	orderItemRec.blng__RevenueRecognitionRule__c =[select id from blng__RevenueRecognitionRule__c limit 1].id;	
            	orderItemRec.blng__BillingTreatment__c =[select id from blng__BillingTreatment__c limit 1].id;
                orderItemRec.OrderId =ord[0].id;
        		orderItemRec.UnitPrice=30;
        orderItemRec.SBQQ__ChargeType__c='Agency';
        		orderItemRec.Quantity =1;
        Product2 ChargeHead=[select id from Product2 limit 1];
       			orderItemRec.Product2Id=ChargeHead.id;
            orderItemRec.BVC_CB_ChargeType__c='Agency';
            orderItemRec.BVC_CB_ChargeAmount__c=30;
                orderitemrec.SBQQ__BillingFrequency__c ='Monthly';
       insert orderItemRec;
        ord[0].Status ='Activated';
          ord[0].BVC_CB_Invoice_Type__c ='Commercial Invoice';
       update ord;
        blng__Invoice__c inv =[select id,blng__Account__c,BVC_Entity__c,BVC_Branch__c,BVC_Billing_Entity__c,blng__BillToContact__c,Billing_Address__c,BVC_CB_Is_CB_Invoice__c,Invoice_Type__c,Short_URL__c,Total_Secure_Logistics_Tax_Amount__c,Total_Logistics_Tax_Amount__c,Total_Commission_Tax__c,blng__InvoiceStatus__c,EY_Tax_Calculation_Status__c,blng__TaxAmount__c,Total_Freight_Tax__c,Total_Liability_Charge_Tax__c,Total_Offline_Tax__c,Total_Weight_Charge_Tax__c,Total_BVC_Valuation_Charge_Tax__c,Total_Docket_Charge_Tax__c,Total_Holiday_Charge_Tax__c,Total_Fuel_Charge_Tax__c,Total_Fuel_surcharge_Tax__c,Total_Vaulting_tax__c from blng__Invoice__c limit 1];
        inv.Billing_Address__c =[select id from AddressBook__c where Dealer_Type__c = 'SEZ' limit 1].id;
        inv.BVC_CB_Is_CB_Invoice__c = false;
        inv.BVC_CB_Operation_Type__c='Import';
        inv.Invoice_Type__c ='Bill of Supply Invoice';
        inv.BVC_CB_Invoice_Type__c='Bill of Supply Invoice';
        inv.EY_Tax_Calculation_Status__c = 'Success';
        inv.blng__InvoiceStatus__c = 'Draft';
        inv.Short_URL__c ='test';
        update inv;
        
        
         blng__InvoiceLine__c invLine = [select id,blng__Invoice__c,ST_Offline_Charge__c,blng__Subtotal__c,blng__UnitPrice__c,blng__Product__c,Name,blng__OrderProduct__c from blng__InvoiceLine__c where blng__Invoice__c= :inv.id limit 1];
                //blng__Invoice__c invRec = [Select id,Billing_Address__c, blng__Account__c, BVC_Branch__c, BVC_Billing_Entity__c,BVC_Billing_Entity__r.GSTIN_State_Code__c, BVC_Entity__c, blng__BillToContact__c from blng__Invoice__c where blng__InvoiceStatus__c ='Posted' Limit 1];
          list<blng__CreditNote__c> cnlist = new list<blng__CreditNote__c>();
          list<blng__CreditNoteLine__c> cnlinelist = new list<blng__CreditNoteLine__c>();
          blng__CreditNote__c creditNote = new blng__CreditNote__c();
        creditNote.blng__Account__c = inv.blng__Account__c;
        creditNote.BVC_Branch__c = inv.BVC_Branch__c;
        creditNote.BVC_Billing_Entity__c = inv.BVC_Billing_Entity__c;
        creditNote.Billing_Address__c = inv.Billing_Address__c;
        creditNote.blng__BillToContact__c = inv.blng__BillToContact__c;
        creditNote.BVC_Entity__c = inv.BVC_Entity__c;
        creditNote.blng__RelatedInvoice__c = inv.Id;
        creditNote.blng__CreditNoteDate__c = System.Today();
        creditNote.Approval_Status__c = 'Approved';
        creditNote.blng__Status__c='Draft';
        creditNote.Reason_for_Credit_Note__c = 'Duplicate Billing';
          //creditNote.RecordTypeId = Schema.SObjectType.blng__CreditNote__c.getRecordTypeInfosByName().get('Tax Credit Note').getRecordTypeId();
        cnlist.add(creditNote);
        list<Charge_Head_Tax__c> chlist=new list<Charge_Head_Tax__c>();
        list<string> chnames=new list<string>{'FREIGHT CHARGES','OFFLINE CHARGES','LIABILITY CHARGES','FUEL SURCHARGE','VAULTING CHARGES','DOCKET CHARGES','FUEL CHARGES','HOLIDAY CHARGES','WEIGHT CHARGES','COMMISSION','LOGISTICS CHARGES','SECURE LOGISTICS CHARGES'};
            for(Integer i = 0; i < chnames.size(); i++){
               Charge_Head_Tax__c ch=new Charge_Head_Tax__c();
                ch.Name=chnames[i];
                ch.Invoice__c=inv.Id;
        		ch.Total_Amount__c=200;
       			ch.Tax_Amount__c=20;
        		chlist.add(ch);
            }
        insert chlist;
        system.schedule('Test Invalid Integration Logs Scheduler1', '0 35 0 ? * * *', new ClearInvalidIntegrationLogsScheduler() );
		// CB Credit Note
		blng__CreditNote__c creditNote1 = new blng__CreditNote__c();
        creditNote1.blng__Account__c = inv.blng__Account__c;
        creditNote1.BVC_Branch__c = inv.BVC_Branch__c;
        creditNote1.BVC_Billing_Entity__c = inv.BVC_Billing_Entity__c;
        creditNote1.Billing_Address__c = inv.Billing_Address__c;
        creditNote1.blng__BillToContact__c = inv.blng__BillToContact__c;
        creditNote1.BVC_Entity__c = inv.BVC_Entity__c;
        creditNote1.blng__RelatedInvoice__c = inv.Id;
        creditNote1.blng__CreditNoteDate__c = System.Today();
        creditNote1.Approval_Status__c = 'Approved';
        creditNote1.Reason_for_Credit_Note__c = 'Duplicate Billing';
        creditNote1.blng__Status__c='Draft';
        cnlist.add(creditNote1);
        insert cnlist;     
          //cn1
          Product2 prod = [select id,Name from Product2 limit 1];
        blng__CreditNoteLine__c newCNLine = new blng__CreditNoteLine__c ();
        newCNLine.Type__c ='Master';
        newCNLine.Charge_Head_Type__c  = 'Offline Charge';
        newCNLine.blng__CreditNote__c   = cnlist[0].Id;
        newCNLine.blng__Product__c   = prod.Id;
        newCNLine.blng__Subtotal__c   = 0;
        cnlinelist.add(newCNLine);
          //cn2
        Product2 prod1 = [select id,Name from Product2 where name = 'BOND FORMALITY' limit 1];
        blng__CreditNoteLine__c newCNLine1 = new blng__CreditNoteLine__c ();
        newCNLine1.Type__c ='CB';
        newCNLine1.Charge_Head_Type__c  = 'BOND FORMALITY';
        newCNLine1.blng__CreditNote__c   = cnlist[1].Id;
        newCNLine1.blng__Product__c   = prod1.Id;
        newCNLine1.blng__Subtotal__c   = 0;
        cnlinelist.add(newCNLine1);
        insert cnlinelist;
       /* blng__CreditNoteAllocation__c  CNAllocation = new blng__CreditNoteAllocation__c ();
        CNAllocation.blng__Amount__c  = 0;
        CNAllocation.blng__CreditNoteLine__c = cnlinelist[0].Id;
        CNAllocation.blng__InvoiceLine__c =  invLine.Id;
        CNAllocation.blng__Type__c  = 'Allocation';
        insert CNAllocation;
        CPQ_CNEYTaxCalculation.doTaxCalculationForCN(cnlist[1].id);*/
    
        CBOrderActivation testobj = new CBOrderActivation();//for the batch class CBOrderActivationBatch added
        String cronexpression = '0 43 20 ? * * *';
        System.schedule('Testing', cronexpression, testobj);
        Database.executeBatch(new CBOrderActivationBatch(), 50);
        CBOrderActivationBatch.Method2();
        
    }

}